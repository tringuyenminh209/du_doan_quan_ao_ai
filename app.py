from flask import Flask, render_template, request, jsonify
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import os
from werkzeug.utils import secure_filename
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

# T·∫£i m√¥ h√¨nh
try:
    model = load_model('model.h5')
    logging.info("M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
except Exception as e:
    logging.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
    model = None

# D·ªãch ƒëa ng√¥n ng·ªØ
translations = {
    "vi": {
        "title": "Ph√¢n lo·∫°i s·∫£n ph·∫©m b·∫±ng AI",
        "upload": "T·∫£i ·∫£nh l√™n",
        "predict": "D·ª± ƒëo√°n",
        "result": "K·∫øt qu·∫£"
    },
    "en": {
        "title": "AI Product Classifier",
        "upload": "Upload Image",
        "predict": "Predict",
        "result": "Result"
    },
    "jp": {
        "title": "AIË£ΩÂìÅÂàÜÈ°û",
        "upload": "ÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ",
        "predict": "‰∫àÊ∏¨„Åô„Çã",
        "result": "ÁµêÊûú"
    }
}

LABELS_VI = [
    "√Åo thun", "Qu·∫ßn d√†i", "√Åo kho√°c", "V√°y",
    "√Åo kho√°c len", "√Åo s∆° mi", "Sandal", "Gi√†y th·ªÉ thao",
    "T√∫i x√°ch", "·ª¶ng"
]

UPLOAD_FOLDER = 'static/uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def process_image(img_path):
    """X·ª≠ l√Ω ·∫£nh v√† d·ª± ƒëo√°n nh√£n."""
    try:
        logging.info(f"üì∑ ƒêang x·ª≠ l√Ω ·∫£nh: {img_path}")
        img = image.load_img(img_path, target_size=(28, 28), color_mode='grayscale')
        img_array = image.img_to_array(img) / 255.0
        logging.info(f"‚úÖ K√≠ch th∆∞·ªõc ·∫£nh sau convert: {img_array.shape}")
        img_array = img_array.reshape(1, 28, 28, 1)
        pred = model.predict(img_array)
        return LABELS_VI[np.argmax(pred)]
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
        return "L·ªói x·ª≠ l√Ω ·∫£nh"

@app.route('/', methods=['GET', 'POST'])
def index():
    lang = request.args.get('lang', 'vi')
    label = None
    img_path = None

    if request.method == 'POST':
        file = request.files.get('file')
        if file and file.filename != '':
            filename = secure_filename(file.filename)
            img_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(img_path)
            logging.info(f"File ƒë∆∞·ª£c t·∫£i l√™n: {filename}")
            logging.info(f"ƒê∆∞·ªùng d·∫´n file: {img_path}")

            if model:
                try:
                    label = process_image(img_path)
                except Exception as e:
                    logging.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")
                    label = "L·ªói khi d·ª± ƒëo√°n. Vui l√≤ng th·ª≠ l·∫°i."
            else:
                label = "M√¥ h√¨nh kh√¥ng kh·∫£ d·ª•ng."
        else:
            label = "Vui l√≤ng t·∫£i l√™n m·ªôt t·ªáp h·ª£p l·ªá."

    return render_template("index.html", label=label, img_path=img_path,
                           lang=lang, translations=translations)

@app.route('/api/predict', methods=['POST'])
def api_predict():
    if model is None:
        return jsonify({"error": "M√¥ h√¨nh kh√¥ng kh·∫£ d·ª•ng"}), 500

    file = request.files.get('file')
    if not file:
        return jsonify({"error": "No file provided"}), 400

    try:
        filename = secure_filename(file.filename)
        img_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(img_path)

        # Ti·ªÅn x·ª≠ l√Ω
        img = image.load_img(img_path, target_size=(28, 28), color_mode='grayscale')
        img_array = image.img_to_array(img) / 255.0
        img_array = img_array.reshape(1, 28, 28, 1)

        # D·ª± ƒëo√°n
        prediction = model.predict(img_array)[0]
        predicted_index = int(np.argmax(prediction))
        confidence = float(np.max(prediction))
        label = LABELS_VI[predicted_index]

        return jsonify({
            "label": label,
            "confidence": confidence,
            "index": predicted_index
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/test')
def test_page():
    return render_template('test.html')

if __name__ == '__main__':
    app.run(debug=True)